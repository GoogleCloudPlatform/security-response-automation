//+build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	blobFileName string = "blob.go"
	filtersDir   string = "../../../../config/filters"
)

var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package storage

// Code generated by go generate; DO NOT EDIT.
func init() {
	{{- range $name, $file := . }}
    	FileStore.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func main() {
	// Checking directory with files
	if _, err := os.Stat(filtersDir); os.IsNotExist(err) {
		log.Fatal("filters directory does not exist")
	}

	// Create map for filenames
	config := readConfig()

	// Create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatalf("Error creating blob file: %v", err)
	}
	defer f.Close()

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, config); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}

func readConfig() map[string][]byte {
	config := make(map[string][]byte)

	err := filepath.Walk(filtersDir, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, fmt.Sprintf("%s/", filtersDir)))

		if info.IsDir() {
			log.Printf("skipping directory %s", relativePath)
			return nil
		} else {
			if strings.HasSuffix(relativePath, "_test.rego") {
				log.Printf("skipping rego test file %s", relativePath)
				return nil
			}
			if strings.HasSuffix(relativePath, ".rego") {
				log.Printf("embedding rego file %s", relativePath)
				content, err := ioutil.ReadFile(path)
				if err != nil {
					log.Printf("error reading %s: %s", path, err)
					return err
				}
				config[relativePath] = content
			}
		}
		return nil
	})
	if err != nil {
		log.Fatalf("Error walking through filter directory: %v", err)
	}
	return config
}
